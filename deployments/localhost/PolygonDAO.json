{
  "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "passed",
          "type": "bool"
        }
      ],
      "name": "ProposalClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "vote",
          "type": "bool"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "applyForMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        }
      ],
      "name": "approveMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "closeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voteYes",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a144d4339f2d564d744bc41fcb3404db772025bf197f2e25fa76cf6446522a5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "transactionIndex": 0,
    "gasUsed": "1410880",
    "logsBloom": "0x
    "blockHash": "0xc0b2c7cb31d4a7be55a29890040a66f9af7ace7bfe2af7eb6359e0ba709e89c6",
    "transactionHash": "0x6a144d4339f2d564d744bc41fcb3404db772025bf197f2e25fa76cf6446522a5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0x6a144d4339f2d564d744bc41fcb3404db772025bf197f2e25fa76cf6446522a5",
        "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc0b2c7cb31d4a7be55a29890040a66f9af7ace7bfe2af7eb6359e0ba709e89c6"
      }
    ],
    "blockNumber": 20,
    "cumulativeGasUsed": "1410880",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d39e8ae80e482d12fa8682caa7c12f73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"}],\"name\":\"ProposalClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"applyForMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"}],\"name\":\"approveMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"closeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteYes\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonDAO.sol\":\"PolygonDAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PolygonDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract PolygonDAO is Ownable {\\r\\n    struct Member {\\r\\n        address addr;\\r\\n        bool approved;\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        string description;\\r\\n        uint yesVotes;\\r\\n        uint noVotes;\\r\\n        bool closed;\\r\\n        address[] voters;\\r\\n    }\\r\\n\\r\\n    Member[] public members;\\r\\n    Proposal[] public proposals;\\r\\n\\r\\n    // Events\\r\\n    event NewMember(address indexed member);\\r\\n    event ProposalCreated(uint indexed proposalId);\\r\\n    event Voted(uint indexed proposalId, address indexed voter, bool vote);\\r\\n    event ProposalClosed(uint indexed proposalId, bool passed);\\r\\n\\r\\n    // Apply to join the DAO\\r\\n    function applyForMembership() external {\\r\\n        members.push(Member(msg.sender, false));\\r\\n        emit NewMember(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Approve a member\\r\\n    function approveMembership(address memberAddress) external onlyOwner {\\r\\n        for (uint i = 0; i < members.length; i++) {\\r\\n            if (members[i].addr == memberAddress) {\\r\\n                members[i].approved = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Create a proposal\\r\\n    function createProposal(string calldata description) external {\\r\\n        require(\\r\\n            isMember(msg.sender),\\r\\n            \\\"You must be a member to create a proposal.\\\"\\r\\n        );\\r\\n        proposals.push(Proposal(description, 0, 0, false, new address[](0)));\\r\\n        uint proposalId = proposals.length - 1;\\r\\n        emit ProposalCreated(proposalId);\\r\\n    }\\r\\n\\r\\n    // Vote on a proposal\\r\\n    function vote(uint proposalId, bool voteYes) external {\\r\\n        require(isMember(msg.sender), \\\"You must be a member to vote.\\\");\\r\\n        require(\\r\\n            !proposals[proposalId].closed,\\r\\n            \\\"Voting is closed for this proposal.\\\"\\r\\n        );\\r\\n        for (uint i = 0; i < proposals[proposalId].voters.length; i++) {\\r\\n            require(\\r\\n                proposals[proposalId].voters[i] != msg.sender,\\r\\n                \\\"You have already voted.\\\"\\r\\n            );\\r\\n        }\\r\\n        if (voteYes) {\\r\\n            proposals[proposalId].yesVotes++;\\r\\n        } else {\\r\\n            proposals[proposalId].noVotes++;\\r\\n        }\\r\\n        proposals[proposalId].voters.push(msg.sender);\\r\\n        emit Voted(proposalId, msg.sender, voteYes);\\r\\n    }\\r\\n\\r\\n    // Close a proposal and declare the result\\r\\n    function closeProposal(uint proposalId) external onlyOwner {\\r\\n        require(\\r\\n            !proposals[proposalId].closed,\\r\\n            \\\"This proposal is already closed.\\\"\\r\\n        );\\r\\n        proposals[proposalId].closed = true;\\r\\n        bool passed = proposals[proposalId].yesVotes >\\r\\n            proposals[proposalId].noVotes;\\r\\n        emit ProposalClosed(proposalId, passed);\\r\\n    }\\r\\n\\r\\n    // Check if an address is a member\\r\\n    function isMember(address addr) public view returns (bool) {\\r\\n        for (uint i = 0; i < members.length; i++) {\\r\\n            if (members[i].addr == addr && members[i].approved) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38cfc0ee868e7a24d279b70be0d390b4443e77da307fb36d094d9cfd557fdc2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6118298061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461015457806379a68cf11461015e5780638da5cb5b1461017a578063a230c52414610198578063c9d27afe146101c8578063f2fde38b146101e4576100a9565b8063013cf08b146100ae5780630386a016146100e157806349c2a1a6146100fd5780635daf08ca146101195780635e1ee52a1461014a575b600080fd5b6100c860048036038101906100c39190610fcf565b610200565b6040516100d894939291906110bf565b60405180910390f35b6100fb60048036038101906100f69190610fcf565b6102d5565b005b61011760048036038101906101129190611170565b61041b565b005b610133600480360381019061012e9190610fcf565b6105ff565b6040516101419291906111fe565b60405180910390f35b61015261065c565b005b61015c61075f565b005b61017860048036038101906101739190611253565b610773565b005b610182610855565b60405161018f9190611280565b60405180910390f35b6101b260048036038101906101ad9190611253565b61087e565b6040516101bf919061129b565b60405180910390f35b6101e260048036038101906101dd91906112e2565b610967565b005b6101fe60048036038101906101f99190611253565b610c94565b005b6002818154811061021057600080fd5b906000526020600020906005020160009150905080600001805461023390611351565b80601f016020809104026020016040519081016040528092919081815260200182805461025f90611351565b80156102ac5780601f10610281576101008083540402835291602001916102ac565b820191906000526020600020905b81548152906001019060200180831161028f57829003601f168201915b5050505050908060010154908060020154908060030160009054906101000a900460ff16905084565b6102dd610d18565b600281815481106102f1576102f0611383565b5b906000526020600020906005020160030160009054906101000a900460ff1615610350576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610347906113fe565b60405180910390fd5b60016002828154811061036657610365611383565b5b906000526020600020906005020160030160006101000a81548160ff0219169083151502179055506000600282815481106103a4576103a3611383565b5b906000526020600020906005020160020154600283815481106103ca576103c9611383565b5b906000526020600020906005020160010154119050817faffed5d901d9fbe9106721fa52653ede403c09699f9f810f6d378acc51fb50fa8260405161040f919061129b565b60405180910390a25050565b6104243361087e565b610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90611490565b60405180910390fd5b60026040518060a0016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016000815260200160008152602001600015158152602001600067ffffffffffffffff8111156104ec576104eb6114b0565b5b60405190808252806020026020018201604052801561051a5781602001602082028036833780820191505090505b5081525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000019080519060200190610563929190610e62565b50602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160040190805190602001906105b4929190610ee8565b505050600060016002805490506105cb919061150e565b9050807fc2c021f5d73c63c481d336fbbafec58f694fc45095f00b02d2deb8cca59afe0760405160405180910390a2505050565b6001818154811061060f57600080fd5b906000526020600020016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b600160405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600015158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555050503373ffffffffffffffffffffffffffffffffffffffff167fb4dcb6dd550f27b5917ebf674899ea7046ff91790c6f9f01431617ad39819db260405160405180910390a2565b610767610d18565b6107716000610d96565b565b61077b610d18565b60005b600180549050811015610851578173ffffffffffffffffffffffffffffffffffffffff16600182815481106107b6576107b5611383565b5b9060005260206000200160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561083e57600180828154811061081557610814611383565b5b9060005260206000200160000160146101000a81548160ff021916908315150217905550610851565b808061084990611542565b91505061077e565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090505b60018054905081101561095c578273ffffffffffffffffffffffffffffffffffffffff16600182815481106108be576108bd611383565b5b9060005260206000200160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561093a57506001818154811061091e5761091d611383565b5b9060005260206000200160000160149054906101000a900460ff165b15610949576001915050610962565b808061095490611542565b915050610886565b50600090505b919050565b6109703361087e565b6109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a6906115d7565b60405180910390fd5b600282815481106109c3576109c2611383565b5b906000526020600020906005020160030160009054906101000a900460ff1615610a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1990611669565b60405180910390fd5b60005b60028381548110610a3957610a38611383565b5b906000526020600020906005020160040180549050811015610b38573373ffffffffffffffffffffffffffffffffffffffff1660028481548110610a8057610a7f611383565b5b90600052602060002090600502016004018281548110610aa357610aa2611383565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c906116d5565b60405180910390fd5b8080610b3090611542565b915050610a25565b508015610b7f5760028281548110610b5357610b52611383565b5b90600052602060002090600502016001016000815480929190610b7590611542565b9190505550610bbb565b60028281548110610b9357610b92611383565b5b90600052602060002090600502016002016000815480929190610bb590611542565b91905055505b60028281548110610bcf57610bce611383565b5b9060005260206000209060050201600401339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16827ff2913dbe661ee2acc4a046d8fbcdc792373bda34c41c6086484b5345e5785e5f83604051610c88919061129b565b60405180910390a35050565b610c9c610d18565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0390611767565b60405180910390fd5b610d1581610d96565b50565b610d20610e5a565b73ffffffffffffffffffffffffffffffffffffffff16610d3e610855565b73ffffffffffffffffffffffffffffffffffffffff1614610d94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8b906117d3565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054610e6e90611351565b90600052602060002090601f016020900481019282610e905760008555610ed7565b82601f10610ea957805160ff1916838001178555610ed7565b82800160010185558215610ed7579182015b82811115610ed6578251825591602001919060010190610ebb565b5b509050610ee49190610f72565b5090565b828054828255906000526020600020908101928215610f61579160200282015b82811115610f605782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610f08565b5b509050610f6e9190610f72565b5090565b5b80821115610f8b576000816000905550600101610f73565b5090565b600080fd5b600080fd5b6000819050919050565b610fac81610f99565b8114610fb757600080fd5b50565b600081359050610fc981610fa3565b92915050565b600060208284031215610fe557610fe4610f8f565b5b6000610ff384828501610fba565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103657808201518184015260208101905061101b565b83811115611045576000848401525b50505050565b6000601f19601f8301169050919050565b600061106782610ffc565b6110718185611007565b9350611081818560208601611018565b61108a8161104b565b840191505092915050565b61109e81610f99565b82525050565b60008115159050919050565b6110b9816110a4565b82525050565b600060808201905081810360008301526110d9818761105c565b90506110e86020830186611095565b6110f56040830185611095565b61110260608301846110b0565b95945050505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111305761112f61110b565b5b8235905067ffffffffffffffff81111561114d5761114c611110565b5b60208301915083600182028301111561116957611168611115565b5b9250929050565b6000806020838503121561118757611186610f8f565b5b600083013567ffffffffffffffff8111156111a5576111a4610f94565b5b6111b18582860161111a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111e8826111bd565b9050919050565b6111f8816111dd565b82525050565b600060408201905061121360008301856111ef565b61122060208301846110b0565b9392505050565b611230816111dd565b811461123b57600080fd5b50565b60008135905061124d81611227565b92915050565b60006020828403121561126957611268610f8f565b5b60006112778482850161123e565b91505092915050565b600060208201905061129560008301846111ef565b92915050565b60006020820190506112b060008301846110b0565b92915050565b6112bf816110a4565b81146112ca57600080fd5b50565b6000813590506112dc816112b6565b92915050565b600080604083850312156112f9576112f8610f8f565b5b600061130785828601610fba565b9250506020611318858286016112cd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061136957607f821691505b6020821081141561137d5761137c611322565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546869732070726f706f73616c20697320616c726561647920636c6f7365642e600082015250565b60006113e8602083611007565b91506113f3826113b2565b602082019050919050565b60006020820190508181036000830152611417816113db565b9050919050565b7f596f75206d7573742062652061206d656d62657220746f20637265617465206160008201527f2070726f706f73616c2e00000000000000000000000000000000000000000000602082015250565b600061147a602a83611007565b91506114858261141e565b604082019050919050565b600060208201905081810360008301526114a98161146d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061151982610f99565b915061152483610f99565b925082821015611537576115366114df565b5b828203905092915050565b600061154d82610f99565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115805761157f6114df565b5b600182019050919050565b7f596f75206d7573742062652061206d656d62657220746f20766f74652e000000600082015250565b60006115c1601d83611007565b91506115cc8261158b565b602082019050919050565b600060208201905081810360008301526115f0816115b4565b9050919050565b7f566f74696e6720697320636c6f73656420666f7220746869732070726f706f7360008201527f616c2e0000000000000000000000000000000000000000000000000000000000602082015250565b6000611653602383611007565b915061165e826115f7565b604082019050919050565b6000602082019050818103600083015261168281611646565b9050919050565b7f596f75206861766520616c726561647920766f7465642e000000000000000000600082015250565b60006116bf601783611007565b91506116ca82611689565b602082019050919050565b600060208201905081810360008301526116ee816116b2565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611751602683611007565b915061175c826116f5565b604082019050919050565b6000602082019050818103600083015261178081611744565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006117bd602083611007565b91506117c882611787565b602082019050919050565b600060208201905081810360008301526117ec816117b0565b905091905056fea2646970667358221220f50ba2a7597659eb39b2f6043a66162b9fd61ed5398e43c762fe9f9df9ea6ab564736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461015457806379a68cf11461015e5780638da5cb5b1461017a578063a230c52414610198578063c9d27afe146101c8578063f2fde38b146101e4576100a9565b8063013cf08b146100ae5780630386a016146100e157806349c2a1a6146100fd5780635daf08ca146101195780635e1ee52a1461014a575b600080fd5b6100c860048036038101906100c39190610fcf565b610200565b6040516100d894939291906110bf565b60405180910390f35b6100fb60048036038101906100f69190610fcf565b6102d5565b005b61011760048036038101906101129190611170565b61041b565b005b610133600480360381019061012e9190610fcf565b6105ff565b6040516101419291906111fe565b60405180910390f35b61015261065c565b005b61015c61075f565b005b61017860048036038101906101739190611253565b610773565b005b610182610855565b60405161018f9190611280565b60405180910390f35b6101b260048036038101906101ad9190611253565b61087e565b6040516101bf919061129b565b60405180910390f35b6101e260048036038101906101dd91906112e2565b610967565b005b6101fe60048036038101906101f99190611253565b610c94565b005b6002818154811061021057600080fd5b906000526020600020906005020160009150905080600001805461023390611351565b80601f016020809104026020016040519081016040528092919081815260200182805461025f90611351565b80156102ac5780601f10610281576101008083540402835291602001916102ac565b820191906000526020600020905b81548152906001019060200180831161028f57829003601f168201915b5050505050908060010154908060020154908060030160009054906101000a900460ff16905084565b6102dd610d18565b600281815481106102f1576102f0611383565b5b906000526020600020906005020160030160009054906101000a900460ff1615610350576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610347906113fe565b60405180910390fd5b60016002828154811061036657610365611383565b5b906000526020600020906005020160030160006101000a81548160ff0219169083151502179055506000600282815481106103a4576103a3611383565b5b906000526020600020906005020160020154600283815481106103ca576103c9611383565b5b906000526020600020906005020160010154119050817faffed5d901d9fbe9106721fa52653ede403c09699f9f810f6d378acc51fb50fa8260405161040f919061129b565b60405180910390a25050565b6104243361087e565b610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90611490565b60405180910390fd5b60026040518060a0016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016000815260200160008152602001600015158152602001600067ffffffffffffffff8111156104ec576104eb6114b0565b5b60405190808252806020026020018201604052801561051a5781602001602082028036833780820191505090505b5081525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000019080519060200190610563929190610e62565b50602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160040190805190602001906105b4929190610ee8565b505050600060016002805490506105cb919061150e565b9050807fc2c021f5d73c63c481d336fbbafec58f694fc45095f00b02d2deb8cca59afe0760405160405180910390a2505050565b6001818154811061060f57600080fd5b906000526020600020016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b600160405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600015158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555050503373ffffffffffffffffffffffffffffffffffffffff167fb4dcb6dd550f27b5917ebf674899ea7046ff91790c6f9f01431617ad39819db260405160405180910390a2565b610767610d18565b6107716000610d96565b565b61077b610d18565b60005b600180549050811015610851578173ffffffffffffffffffffffffffffffffffffffff16600182815481106107b6576107b5611383565b5b9060005260206000200160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561083e57600180828154811061081557610814611383565b5b9060005260206000200160000160146101000a81548160ff021916908315150217905550610851565b808061084990611542565b91505061077e565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090505b60018054905081101561095c578273ffffffffffffffffffffffffffffffffffffffff16600182815481106108be576108bd611383565b5b9060005260206000200160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561093a57506001818154811061091e5761091d611383565b5b9060005260206000200160000160149054906101000a900460ff165b15610949576001915050610962565b808061095490611542565b915050610886565b50600090505b919050565b6109703361087e565b6109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a6906115d7565b60405180910390fd5b600282815481106109c3576109c2611383565b5b906000526020600020906005020160030160009054906101000a900460ff1615610a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1990611669565b60405180910390fd5b60005b60028381548110610a3957610a38611383565b5b906000526020600020906005020160040180549050811015610b38573373ffffffffffffffffffffffffffffffffffffffff1660028481548110610a8057610a7f611383565b5b90600052602060002090600502016004018281548110610aa357610aa2611383565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c906116d5565b60405180910390fd5b8080610b3090611542565b915050610a25565b508015610b7f5760028281548110610b5357610b52611383565b5b90600052602060002090600502016001016000815480929190610b7590611542565b9190505550610bbb565b60028281548110610b9357610b92611383565b5b90600052602060002090600502016002016000815480929190610bb590611542565b91905055505b60028281548110610bcf57610bce611383565b5b9060005260206000209060050201600401339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16827ff2913dbe661ee2acc4a046d8fbcdc792373bda34c41c6086484b5345e5785e5f83604051610c88919061129b565b60405180910390a35050565b610c9c610d18565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0390611767565b60405180910390fd5b610d1581610d96565b50565b610d20610e5a565b73ffffffffffffffffffffffffffffffffffffffff16610d3e610855565b73ffffffffffffffffffffffffffffffffffffffff1614610d94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8b906117d3565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054610e6e90611351565b90600052602060002090601f016020900481019282610e905760008555610ed7565b82601f10610ea957805160ff1916838001178555610ed7565b82800160010185558215610ed7579182015b82811115610ed6578251825591602001919060010190610ebb565b5b509050610ee49190610f72565b5090565b828054828255906000526020600020908101928215610f61579160200282015b82811115610f605782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610f08565b5b509050610f6e9190610f72565b5090565b5b80821115610f8b576000816000905550600101610f73565b5090565b600080fd5b600080fd5b6000819050919050565b610fac81610f99565b8114610fb757600080fd5b50565b600081359050610fc981610fa3565b92915050565b600060208284031215610fe557610fe4610f8f565b5b6000610ff384828501610fba565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103657808201518184015260208101905061101b565b83811115611045576000848401525b50505050565b6000601f19601f8301169050919050565b600061106782610ffc565b6110718185611007565b9350611081818560208601611018565b61108a8161104b565b840191505092915050565b61109e81610f99565b82525050565b60008115159050919050565b6110b9816110a4565b82525050565b600060808201905081810360008301526110d9818761105c565b90506110e86020830186611095565b6110f56040830185611095565b61110260608301846110b0565b95945050505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111305761112f61110b565b5b8235905067ffffffffffffffff81111561114d5761114c611110565b5b60208301915083600182028301111561116957611168611115565b5b9250929050565b6000806020838503121561118757611186610f8f565b5b600083013567ffffffffffffffff8111156111a5576111a4610f94565b5b6111b18582860161111a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111e8826111bd565b9050919050565b6111f8816111dd565b82525050565b600060408201905061121360008301856111ef565b61122060208301846110b0565b9392505050565b611230816111dd565b811461123b57600080fd5b50565b60008135905061124d81611227565b92915050565b60006020828403121561126957611268610f8f565b5b60006112778482850161123e565b91505092915050565b600060208201905061129560008301846111ef565b92915050565b60006020820190506112b060008301846110b0565b92915050565b6112bf816110a4565b81146112ca57600080fd5b50565b6000813590506112dc816112b6565b92915050565b600080604083850312156112f9576112f8610f8f565b5b600061130785828601610fba565b9250506020611318858286016112cd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061136957607f821691505b6020821081141561137d5761137c611322565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546869732070726f706f73616c20697320616c726561647920636c6f7365642e600082015250565b60006113e8602083611007565b91506113f3826113b2565b602082019050919050565b60006020820190508181036000830152611417816113db565b9050919050565b7f596f75206d7573742062652061206d656d62657220746f20637265617465206160008201527f2070726f706f73616c2e00000000000000000000000000000000000000000000602082015250565b600061147a602a83611007565b91506114858261141e565b604082019050919050565b600060208201905081810360008301526114a98161146d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061151982610f99565b915061152483610f99565b925082821015611537576115366114df565b5b828203905092915050565b600061154d82610f99565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115805761157f6114df565b5b600182019050919050565b7f596f75206d7573742062652061206d656d62657220746f20766f74652e000000600082015250565b60006115c1601d83611007565b91506115cc8261158b565b602082019050919050565b600060208201905081810360008301526115f0816115b4565b9050919050565b7f566f74696e6720697320636c6f73656420666f7220746869732070726f706f7360008201527f616c2e0000000000000000000000000000000000000000000000000000000000602082015250565b6000611653602383611007565b915061165e826115f7565b604082019050919050565b6000602082019050818103600083015261168281611646565b9050919050565b7f596f75206861766520616c726561647920766f7465642e000000000000000000600082015250565b60006116bf601783611007565b91506116ca82611689565b602082019050919050565b600060208201905081810360008301526116ee816116b2565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611751602683611007565b915061175c826116f5565b604082019050919050565b6000602082019050818103600083015261178081611744565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006117bd602083611007565b91506117c882611787565b602082019050919050565b600060208201905081810360008301526117ec816117b0565b905091905056fea2646970667358221220f50ba2a7597659eb39b2f6043a66162b9fd61ed5398e43c762fe9f9df9ea6ab564736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PolygonDAO.sol:PolygonDAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 160,
        "contract": "contracts/PolygonDAO.sol:PolygonDAO",
        "label": "members",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Member)144_storage)dyn_storage"
      },
      {
        "astId": 164,
        "contract": "contracts/PolygonDAO.sol:PolygonDAO",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Proposal)156_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Member)144_storage)dyn_storage": {
        "base": "t_struct(Member)144_storage",
        "encoding": "dynamic_array",
        "label": "struct PolygonDAO.Member[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)156_storage)dyn_storage": {
        "base": "t_struct(Proposal)156_storage",
        "encoding": "dynamic_array",
        "label": "struct PolygonDAO.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Member)144_storage": {
        "encoding": "inplace",
        "label": "struct PolygonDAO.Member",
        "members": [
          {
            "astId": 141,
            "contract": "contracts/PolygonDAO.sol:PolygonDAO",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 143,
            "contract": "contracts/PolygonDAO.sol:PolygonDAO",
            "label": "approved",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)156_storage": {
        "encoding": "inplace",
        "label": "struct PolygonDAO.Proposal",
        "members": [
          {
            "astId": 146,
            "contract": "contracts/PolygonDAO.sol:PolygonDAO",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 148,
            "contract": "contracts/PolygonDAO.sol:PolygonDAO",
            "label": "yesVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 150,
            "contract": "contracts/PolygonDAO.sol:PolygonDAO",
            "label": "noVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 152,
            "contract": "contracts/PolygonDAO.sol:PolygonDAO",
            "label": "closed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 155,
            "contract": "contracts/PolygonDAO.sol:PolygonDAO",
            "label": "voters",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}