{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/PolygonDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract PolygonDAO is Ownable {\r\n    struct Member {\r\n        address addr;\r\n        bool approved;\r\n    }\r\n\r\n    struct Proposal {\r\n        string description;\r\n        uint yesVotes;\r\n        uint noVotes;\r\n        bool closed;\r\n        address[] voters;\r\n    }\r\n\r\n    Member[] public members;\r\n    Proposal[] public proposals;\r\n\r\n    // Events\r\n    event NewMember(address indexed member);\r\n    event ProposalCreated(uint indexed proposalId);\r\n    event Voted(uint indexed proposalId, address indexed voter, bool vote);\r\n    event ProposalClosed(uint indexed proposalId, bool passed);\r\n\r\n    // Apply to join the DAO\r\n    function applyForMembership() external {\r\n        members.push(Member(msg.sender, false));\r\n        emit NewMember(msg.sender);\r\n    }\r\n\r\n    // Approve a member\r\n    function approveMembership(address memberAddress) external onlyOwner {\r\n        for (uint i = 0; i < members.length; i++) {\r\n            if (members[i].addr == memberAddress) {\r\n                members[i].approved = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create a proposal\r\n    function createProposal(string calldata description) external {\r\n        require(\r\n            isMember(msg.sender),\r\n            \"You must be a member to create a proposal.\"\r\n        );\r\n        proposals.push(Proposal(description, 0, 0, false, new address[](0)));\r\n        uint proposalId = proposals.length - 1;\r\n        emit ProposalCreated(proposalId);\r\n    }\r\n\r\n    // Vote on a proposal\r\n    function vote(uint proposalId, bool voteYes) external {\r\n        require(isMember(msg.sender), \"You must be a member to vote.\");\r\n        require(\r\n            !proposals[proposalId].closed,\r\n            \"Voting is closed for this proposal.\"\r\n        );\r\n        for (uint i = 0; i < proposals[proposalId].voters.length; i++) {\r\n            require(\r\n                proposals[proposalId].voters[i] != msg.sender,\r\n                \"You have already voted.\"\r\n            );\r\n        }\r\n        if (voteYes) {\r\n            proposals[proposalId].yesVotes++;\r\n        } else {\r\n            proposals[proposalId].noVotes++;\r\n        }\r\n        proposals[proposalId].voters.push(msg.sender);\r\n        emit Voted(proposalId, msg.sender, voteYes);\r\n    }\r\n\r\n    // Close a proposal and declare the result\r\n    function closeProposal(uint proposalId) external onlyOwner {\r\n        require(\r\n            !proposals[proposalId].closed,\r\n            \"This proposal is already closed.\"\r\n        );\r\n        proposals[proposalId].closed = true;\r\n        bool passed = proposals[proposalId].yesVotes >\r\n            proposals[proposalId].noVotes;\r\n        emit ProposalClosed(proposalId, passed);\r\n    }\r\n\r\n    // Check if an address is a member\r\n    function isMember(address addr) public view returns (bool) {\r\n        for (uint i = 0; i < members.length; i++) {\r\n            if (members[i].addr == addr && members[i].approved) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}